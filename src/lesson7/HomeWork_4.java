package lesson7;

public class HomeWork_4 {
    public static void main(String[] args) {
        //Базовый уровень
        //Задача №1
        //1. Создать два класса, которые умеют летать: самолет и утка. Атрибут утки: isInjured (ранен),
        // атрибут самолета: countPassengers.
        //2. Создать интерфейс, который объединяет эти два класса.
        //3. Имплементировать его в двух классах
        //4. Реализовать метод летать:
        // Для утки:
        // Метод летать будет выкидывать ошибку FlyException (создать такой класс), если утка подстрелена,
        // иначе печатать на экран "утка летит"
        // Для самолета:
        // Метод летать будет выкидывать ошибку FlyException, если количество пассажиров меньше нуля.
        // Иначе печать "самолет летит"
        //5. Создать 1 утку не раненую, 1 утку раненую, 1 самолет с 10 пассажирами, 1 самолет с -1 пассажиром.
        //6. Вызвать у них метод летать
        // Перехватить исключения: вывести на экран message ошибки
        // Ожидание:
        // утка летит
        // Ошибка: утка ранена
        // самолет летит
        // Ошибка: пассажиров в самолете меньше 0

        Duck duck1 = new Duck(false);
        Duck duck2 = new Duck(true);
        Plane plane1 = new Plane(10);
        Plane plane2 = new Plane(-1);
        Flyable[] flyables = {duck1, duck2, plane1, plane2};
        for (Flyable flyable : flyables) {
            try {
                flyable.fly();
            } catch (FlyException flyException) {
                System.out.println(flyException.getMessage());
            }
        }

        //Продвинутый уровень
        //Задача №1
        //1. Создать следующую структуру из классов и интерфейсов:
        // дерево -> ель (имеет шишки, умеет пахнуть)
        // дерево -> сосна (имеет шишки, умеет пахнуть)
        // растение -> роза (умеет цвести, умеет пахнуть)
        // растение -> папоротник (умеет цвести)
        // Создать у каждого класса по объекту, распределить по массивам интерфейсов
        // И у каждого массива вызвать характерный метод
        //Ожидание:
        // сосна : умеет пахнуть
        // ель : умееть пахнуть
        // роза: умееть пахнуть
        // роза: умеет цвести
        // папоротник: умеет цвести

        Spruce spruce = new Spruce("ель");
        Pine pine = new Pine("сосна");
        Rose rose = new Rose("роза");
        Fern fern = new Fern("папоротник");
        Smellable[] smellables = {spruce, pine, rose};
        for (Smellable smellable : smellables) {
            smellable.canSmell();
        }
        Bloomable[] bloomables = {rose, fern};
        for (Bloomable bloomable : bloomables) {
            bloomable.canBloom();
        }

        //Задача №2
        //2. Создать следующую структуру из классов и интерфейсов
        // магазин (обладает работниками)
        // работник (обладает часами)
        // часы (умеют тикать, если сломаны выкидывают ошибку WatchBrokenError)
        // Бренд (обладает массивом магазинов)
        // Создать бренд, положить в него два магазина, в каждом магазине будет по работнику,
        // у каждого работника по часам. У одного работника часы сломаны, у второго нет.
        // После создания бренда, вытащить из него все часы и вызвать у всех часов метод тикать,
        // обработать ошибку сломанных часов.
        // Ожидание вывода на экран:
        // Часы тикают
        // Ошибка: Часы сломались.

        Watch watch1 = new Watch(false);
        Watch watch2 = new Watch(true);
        Worker worker1 = new Worker(watch1);
        Worker worker2 = new Worker(watch2);
        Store store1 = new Store(worker1);
        Store store2 = new Store(worker2);
        Store[] stores = {store1, store2};
        Brand brand = new Brand(stores);
        brand.getTick();

    }
}